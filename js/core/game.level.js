// Generated by CoffeeScript 1.6.2
(function() {
  'use strict';
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Game.Level = (function(_super) {
    __extends(Level, _super);

    function Level(game) {
      this.game = game;
      Level.__super__.constructor.apply(this, arguments);
      Game.EventManager.on('plane.destroy', this, this.onPlaneDestroyed);
      Game.EventManager.on('bullet.create', this, this.onBulletCreated);
      Game.EventManager.on('bullet.destroy', this, this.onBulletDestroyed);
    }

    Level.prototype.onPlaneDestroyed = function(source) {
      if (source instanceof Game.EnemyPlane) {
        return this.removeFrom('level', this.get('level').findKey(source));
      } else if (source instanceof Game.Player) {
        return this.game.die();
      }
    };

    Level.prototype.onBulletCreated = function(source, bullet) {
      return this.addTo('below', _('bullet').uniqueId(), bullet);
    };

    Level.prototype.onBulletDestroyed = function(source) {
      return this.removeFrom('below', this.get('below').findKey(source));
    };

    Level.prototype.create = function() {
      this.createBackground();
      this.createLayers();
      this.createHeadsUpDisplay();
      return this;
    };

    Level.prototype.createBackground = function() {
      this.game.addTo('background', 'islandA', Builder.BackgroundIsland.create('A'));
      this.game.addTo('background', 'islandB', Builder.BackgroundIsland.create('B'));
      this.game.addTo('background', 'islandC', Builder.BackgroundIsland.create('C'));
      return this;
    };

    Level.prototype.createLayers = function() {
      var enemy, i, _i, _results;

      this.add('below', new Game.Container());
      this.add('level', new Game.Container());
      this.add('above', new Game.Container());
      this.addTo('level', 'player', this.player = Builder.PlayerPlane.create());
      _results = [];
      for (i = _i = 0; _i < 15; i = ++_i) {
        _results.push(this.addTo('level', 'enemy-' + i, enemy = Builder.GreenEnemyPlane.create()));
      }
      return _results;
    };

    Level.prototype.createHeadsUpDisplay = function() {
      return this.game.addTo('hud', 'bottom', this.hud = new Display.HeadsUpDisplay(this.game, this));
    };

    Level.prototype.clear = function() {
      this.game.get('collisions').clear();
      this.clearBackground();
      this.clearLayers();
      this.clearHeadsUpDisplay();
      return this;
    };

    Level.prototype.kill = function() {
      this.clear();
      Game.EventManager.off('plane.destroy', this, this.onPlaneDestroyed);
      Game.EventManager.off('bullet.create', this, this.onBulletCreated);
      return Game.EventManager.off('bullet.destroy', this, this.onBulletDestroyed);
    };

    Level.prototype.clearBackground = function() {
      this.game.removeFrom('background', 'islandA');
      this.game.removeFrom('background', 'islandB');
      this.game.removeFrom('background', 'islandC');
      return this;
    };

    Level.prototype.clearLayers = function() {
      var i, _i;

      this.removeFrom('level', 'player');
      for (i = _i = 0; _i < 15; i = ++_i) {
        this.removeFrom('level', 'enemy-' + i);
      }
      this.remove('above');
      this.remove('level');
      return this.remove('below');
    };

    Level.prototype.clearHeadsUpDisplay = function() {
      this.game.removeFrom('hud', 'bottom');
      return this;
    };

    Level.prototype.restart = function() {
      this.clear();
      this.create();
      return this;
    };

    return Level;

  })(Game.Container);

}).call(this);
