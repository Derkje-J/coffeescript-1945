// Generated by CoffeeScript 1.7.1
(function() {
  'use strict';
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Game.Level = (function(_super) {
    __extends(Level, _super);

    function Level(game) {
      this.game = game;
      Level.__super__.constructor.apply(this, arguments);
      Game.EventManager.on('plane.create', this, this.onPlaneCreated);
      Game.EventManager.on('plane.destroy', this, this.onPlaneDestroyed);
      Game.EventManager.on('bullet.create', this, this.onBulletCreated);
      Game.EventManager.on('bullet.destroy', this, this.onBulletDestroyed);
      Game.EventManager.on('shard.create', this, this.onShardCreated);
      Game.EventManager.on('shard.destroy', this, this.onShardDestroyed);
      Game.EventManager.on('points.get', this, this.onPointsGained);
    }

    Level.prototype.onPlaneCreated = function(source) {
      this.addTo('level', _.uniqueId('plane'), source);
      return this.level.planeCreated(source);
    };

    Level.prototype.onPlaneDestroyed = function(source) {
      if (source instanceof Game.EnemyPlane) {
        this.level.planeDestroyed(source);
        return this.removeFrom('level', this.get('level').findKey(source));
      } else if (source instanceof Game.Player) {
        return this.game.die();
      }
    };

    Level.prototype.onPointsGained = function(source, score) {
      return this.game.data.score += score;
    };

    Level.prototype.onBulletCreated = function(source, bullet) {
      return this.addTo('below', _.uniqueId('bullet'), bullet);
    };

    Level.prototype.onBulletDestroyed = function(source) {
      return this.removeFrom('below', this.get('below').findKey(source));
    };

    Level.prototype.onShardCreated = function(source) {
      return this.addTo('below', _.uniqueId('shard'), source);
    };

    Level.prototype.onShardDestroyed = function(source) {
      return this.removeFrom('below', this.get('below').findKey(source));
    };

    Level.prototype.create = function(level) {
      this.createBackground();
      this.createLayers();
      this.createHeadsUpDisplay();
      this._load(level);
      return this;
    };

    Level.prototype._load = function(level) {
      switch (level) {
        case 0:
          return this._injectLevelData(new Levels.Level0());
        default:
          return this._injectLevelData(new Levels.Endless());
      }
    };

    Level.prototype._injectLevelData = function(level) {
      this.level = level;
      return this.level.injectInto(this);
    };

    Level.prototype.createBackground = function() {
      this.game.addTo('background', 'islandA', Builder.BackgroundIsland.create('A'));
      this.game.addTo('background', 'islandB', Builder.BackgroundIsland.create('B'));
      this.game.addTo('background', 'islandC', Builder.BackgroundIsland.create('C'));
      return this;
    };

    Level.prototype.createLayers = function() {
      this.add('below', new Game.Container());
      this.add('level', new Game.Container());
      this.add('above', new Game.Container());
      return this.addTo('level', 'player', this.player = Builder.PlayerPlane.create());
    };

    Level.prototype.pause = function() {
      this.level.pause();
      return Game.EventManager.trigger('level.paused', this, [true]);
    };

    Level.prototype.resume = function() {
      this.level.resume();
      return Game.EventManager.trigger('level.paused', this, [false]);
    };

    Level.prototype.createHeadsUpDisplay = function() {
      return this.game.addTo('hud', 'bottom', this.hud = new Display.HeadsUpDisplay(this.game, this));
    };

    Level.prototype.clear = function() {
      this.game.get('collisions').clear();
      this.clearBackground();
      this.clearLayers();
      this.clearHeadsUpDisplay();
      return this;
    };

    Level.prototype.kill = function() {
      this.clear();
      Game.EventManager.off('plane.destroy', this, this.onPlaneDestroyed);
      Game.EventManager.off('bullet.create', this, this.onBulletCreated);
      return Game.EventManager.off('bullet.destroy', this, this.onBulletDestroyed);
    };

    Level.prototype.clearBackground = function() {
      this.game.removeFrom('background', 'islandA');
      this.game.removeFrom('background', 'islandB');
      this.game.removeFrom('background', 'islandC');
      return this;
    };

    Level.prototype.clearLayers = function() {
      var key, object, _ref;
      this.removeFrom('level', 'player');
      _ref = this.get('level').objects;
      for (key in _ref) {
        object = _ref[key];
        this.removeFrom('level', key);
      }
      this.remove('above');
      this.remove('level');
      return this.remove('below');
    };

    Level.prototype.clearHeadsUpDisplay = function() {
      this.game.removeFrom('hud', 'bottom');
      return this;
    };

    Level.prototype.restart = function() {
      this.clear();
      this.create();
      return this;
    };

    Level.prototype.update = function(event) {
      if (event.paused || this.level === void 0 || this.level.isPaused === true) {
        return this;
      }
      Level.__super__.update.apply(this, arguments);
      this.level.update(event);
      return this;
    };

    return Level;

  })(Game.Container);

}).call(this);
