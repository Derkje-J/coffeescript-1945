// Generated by CoffeeScript 1.6.2
(function() {
  'use strict';
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Game.Container = (function() {
    function Container() {
      this.input = __bind(this.input, this);
      this.update = __bind(this.update, this);      this.objects = {};
      this.container = new createjs.Container();
      Object.defineProperties(this, {
        'createjs': {
          get: function() {
            return this.container;
          }
        },
        'x': {
          get: function() {
            var _ref;

            return (_ref = this._x) != null ? _ref : 0;
          },
          set: function(value) {
            this._x = value;
            return this.container.x = (value + .5) | 0;
          }
        },
        'y': {
          get: function() {
            var _ref;

            return (_ref = this._y) != null ? _ref : 0;
          },
          set: function(value) {
            this._y = value;
            return this.container.y = (value + .5) | 0;
          }
        },
        'length': {
          get: function() {
            return _(this.objects).keys().length;
          }
        }
      });
    }

    Container.prototype.update = function(event) {
      var key, object, _ref;

      _ref = this.objects;
      for (key in _ref) {
        object = _ref[key];
        if (object.update != null) {
          object.update(event);
        }
      }
      return this;
    };

    Container.prototype.input = function(event, state) {
      var key, object, _ref, _results;

      _ref = this.objects;
      _results = [];
      for (key in _ref) {
        object = _ref[key];
        if (object.input != null) {
          _results.push(object.input(event, state));
        }
      }
      return _results;
    };

    Container.prototype.add = function(key, object) {
      var _ref;

      if (this.get(key) != null) {
        throw new Error("There already is an object with that key (" + key + ").");
      }
      this.objects[key] = object;
      this.container.addChild((_ref = object.createjs) != null ? _ref : object);
      return this;
    };

    Container.prototype.remove = function(key) {
      var object, _ref;

      if ((object = this.get(key)) == null) {
        return this;
      }
      this.container.removeChild((_ref = object.createjs) != null ? _ref : object);
      delete this.objects[key];
      return this;
    };

    Container.prototype.get = function(key) {
      return this.objects[key];
    };

    Container.prototype.addTo = function(layer, key, object) {
      (this.get(layer)).add(key, object);
      return this;
    };

    Container.prototype.getFrom = function(layer, key) {
      return (this.get(layer)).get(key);
    };

    Container.prototype.removeFrom = function(layer, key) {
      (this.get(layer)).remove(key);
      return this;
    };

    Container.prototype.findKey = function(search) {
      var result;

      result = null;
      _(this.objects).find(function(object, key) {
        if (object === search) {
          result = key;
          return true;
        }
        return false;
      });
      return result;
    };

    return Container;

  })();

}).call(this);
