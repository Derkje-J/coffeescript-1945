// Generated by CoffeeScript 1.6.2
(function() {
  'use strict';  Game.Sprite = (function() {
    function Sprite(spritesheet, x, y) {
      this.spritesheet = spritesheet;
      if (x == null) {
        x = 0;
      }
      if (y == null) {
        y = 0;
      }
      this.animation = new createjs.BitmapAnimation(this.spritesheet);
      this.globalize = _(this.animation.localToGlobal).bind(this.animation);
      Object.defineProperties(this, {
        'createjs': {
          get: function() {
            return this.animation;
          }
        },
        'x': {
          get: function() {
            var _ref;

            return (_ref = this._x) != null ? _ref : 0;
          },
          set: function(value) {
            this._x = value;
            return this.animation.x = (value + .5) | 0;
          }
        },
        'y': {
          get: function() {
            var _ref;

            return (_ref = this._y) != null ? _ref : 0;
          },
          set: function(value) {
            this._y = value;
            return this.animation.y = (value + .5) | 0;
          }
        },
        'width': {
          get: function() {
            return this.animation.getBounds().width;
          }
        },
        'height': {
          get: function() {
            return this.animation.getBounds().height;
          }
        },
        'bounds': {
          get: function() {
            return this.animation.getBounds();
          }
        }
      });
      this.x = x;
      this.y = y;
      this._createCallbackQueue();
    }

    Sprite.prototype._createCallbackQueue = function() {
      var _this = this;

      this._afterQueue = {};
      return this.createjs.addEventListener('animationend', function(event) {
        var action, actions, _i, _len;

        if (_this._afterQueue[event.name] != null) {
          actions = _this._afterQueue[event.name];
          _this._afterQueue[event.name] = [];
          for (_i = 0, _len = actions.length; _i < _len; _i++) {
            action = actions[_i];
            action.call(_this);
          }
        }
        return event;
      });
    };

    Sprite.prototype.play = function(animation) {
      this.createjs.gotoAndPlay(animation);
      return this;
    };

    Sprite.prototype.stop = function(animation) {
      this.createjs.gotoAndStop(animation);
      return this;
    };

    Sprite.prototype.after = function(animation, callback) {
      if (this._afterQueue[animation] == null) {
        this._afterQueue[animation] = [];
      }
      this._afterQueue[animation].push(callback);
      return this;
    };

    Sprite.prototype.update = function(event) {};

    Sprite.prototype.destroy = function() {
      return this.createjs.removeAllEventListeners('animationend');
    };

    return Sprite;

  })();

}).call(this);
