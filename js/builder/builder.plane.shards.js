// Generated by CoffeeScript 1.6.2
(function() {
  'use strict';
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Builder.EnemyPlaneShards = (function(_super) {
    __extends(EnemyPlaneShards, _super);

    EnemyPlaneShards.SpriteSheet = null;

    EnemyPlaneShards.ShardsOfType = {
      back: 11
    };

    function EnemyPlaneShards() {
      EnemyPlaneShards.__super__.constructor.call(this, Game.AssetManager.get('shards').image);
    }

    EnemyPlaneShards.create = function(x, y, vx, vy) {
      var builder;

      if (EnemyPlaneShards.SpriteSheet != null) {
        return this._instance(x, y, vx, vy);
      }
      builder = new Builder.EnemyPlaneShards();
      builder.animation('back', 4, 4, 32, 32, 1, 1, 4, EnemyPlaneShards.ShardsOfType.back);
      EnemyPlaneShards.SpriteSheet = builder.createjs;
      return this._instance(x, y, vx, vy);
    };

    EnemyPlaneShards._instance = function(x, y, vx, vy) {
      var i, pick, picked, results, _i, _j, _ref, _results;

      results = [];
      pick = (function() {
        _results = [];
        for (var _i = 0, _ref = EnemyPlaneShards.ShardsOfType.back; 0 <= _ref ? _i < _ref : _i > _ref; 0 <= _ref ? _i++ : _i--){ _results.push(_i); }
        return _results;
      }).apply(this);
      for (i = _j = 0; _j < 5; i = ++_j) {
        picked = pick[(Math.random() * pick.length + 0.5) | 0];
        pick = _(pick).without(picked);
        results.push(new Game.Shard(EnemyPlaneShards.SpriteSheet, x, y, vx, vy, picked, 'back'));
      }
      return results;
    };

    return EnemyPlaneShards;

  })(Builder.SpriteSheet);

}).call(this);
