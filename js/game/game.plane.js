// Generated by CoffeeScript 1.7.1
(function() {
  'use strict';
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __slice = [].slice;

  Game.Plane = (function(_super) {
    __extends(Plane, _super);

    Plane.BaseSpeed = {
      side: 100,
      forward: 100
    };

    function Plane(spritesheet, x, y, health) {
      if (x == null) {
        x = (Game.Canvas1945.LevelWidth / 2 + .5) | 0;
      }
      if (y == null) {
        y = -64;
      }
      if (health == null) {
        health = 3;
      }
      Plane.__super__.constructor.call(this, spritesheet, x, y);
      this.direction = [];
      this.speed = {
        side: 1,
        forward: 1
      };
      this.primaryEnabled = false;
      this.secondaryEnabled = false;
      this._nextActionTime = 0;
      this._throttleActionTime = 350;
      this._health = this._maxHealth = health;
      this.damage = 30;
      Object.defineProperty(this, 'isAlive', {
        get: function() {
          return this.health > 0;
        }
      });
      Object.defineProperty(this, 'health', {
        get: function() {
          return this._health;
        },
        set: function(value) {
          return this._health = Math.max(0, Math.min(this.maxHealth, value));
        }
      });
      Object.defineProperty(this, 'maxHealth', {
        get: function() {
          return this._maxHealth;
        },
        set: function(value) {
          this._maxHealth = Math.max(0, value);
          return this.health = this.health;
        }
      });
      this.play('idle');
      this.face(Game.Movable.Direction.down);
      this.move(Game.Movable.Direction.down);
    }

    Plane.prototype.inflict = function(damage) {
      if ((this.health -= damage) <= 0) {
        this.after('explode', this.destroy);
        this.play('explode');
        this._facing = Game.Movable.Direction.down;
        this.direction = [Game.Movable.Direction.down];
        this.setVelocity();
        return true;
      }
      return false;
    };

    Plane.prototype.getDirectionModifier = function(direction) {
      var speed;
      speed = 0;
      if (this._facing === direction) {
        speed = Plane.BaseSpeed.forward * this.speed.forward;
      } else if (__indexOf.call(Game.Movable.Direction["side" + this._facing], direction) >= 0) {
        speed = Plane.BaseSpeed.side * this.speed.side;
      } else if (direction === Game.Movable.Direction["not" + this._facing]) {
        speed = 0;
      }
      switch (direction) {
        case Game.Movable.Direction.up:
          return {
            y: -speed
          };
        case Game.Movable.Direction.left:
          return {
            x: -speed
          };
        case Game.Movable.Direction.right:
          return {
            x: speed
          };
        case Game.Movable.Direction.down:
          return {
            y: speed
          };
      }
    };

    Plane.prototype.update = function(event) {
      if (event.paused || this.isLevelPaused === true) {
        return this;
      }
      Plane.__super__.update.call(this, event);
      if (this._nextActionTime <= 0 || (this._nextActionTime -= event.delta) <= 0) {
        if (this.primaryEnabled) {
          this._nextActionTime += this._throttleActionTime;
          if (typeof this.primaryAction === "function") {
            this.primaryAction();
          }
        }
        if (this.secondaryEnabled) {
          this._nextActionTime += this._throttleActionTime;
          if (typeof this.secondaryAction === "function") {
            this.secondaryAction();
          }
        }
      }
      return this;
    };

    Plane.prototype.destroy = function() {
      Plane.__super__.destroy.apply(this, arguments);
      Game.EventManager.trigger('plane.destroy', this, []);
      return this;
    };

    Plane.prototype.setVelocity = function() {
      var key, modifiers, value;
      modifiers = _.reduce(this.direction, (function(_this) {
        return function(result, key) {
          var modifier, value, _ref;
          _ref = _this.getDirectionModifier(key);
          for (modifier in _ref) {
            value = _ref[modifier];
            result[modifier] += value;
          }
          return result;
        };
      })(this), {
        x: 0,
        y: 0
      });
      for (key in modifiers) {
        value = modifiers[key];
        this.velocity[key] = value;
      }
      return this;
    };

    Plane.prototype.move = function() {
      var direction, directions, _i, _len;
      directions = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      this.direction = [];
      for (_i = 0, _len = directions.length; _i < _len; _i++) {
        direction = directions[_i];
        this.direction.push(direction);
      }
      this.setVelocity();
      return this;
    };

    Plane.prototype.face = function(direction) {
      if (this._facing === direction) {
        return this;
      }
      this._facing = direction;
      this.setVelocity();
      return this;
    };

    return Plane;

  })(Game.Movable);

}).call(this);
