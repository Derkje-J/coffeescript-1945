// Generated by CoffeeScript 1.6.2
(function() {
  'use strict';
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Game.Plane = (function(_super) {
    __extends(Plane, _super);

    Plane.Direction = {
      up: 'up',
      down: 'down',
      left: 'left',
      right: 'right'
    };

    Plane.DirectionModifiers = {
      up: {
        y: -Game.Canvas1945.ScrollSpeed
      },
      down: {
        y: Game.Canvas1945.ScrollSpeed
      },
      left: {
        x: -Game.Canvas1945.ScrollSpeed
      },
      right: {
        x: Game.Canvas1945.ScrollSpeed
      }
    };

    function Plane(spritesheet, x, y) {
      if (x == null) {
        x = (Game.Canvas1945.LevelWidth / 2 + .5) | 0;
      }
      if (y == null) {
        y = 45;
      }
      Plane.__super__.constructor.call(this, spritesheet, x, y);
      this.play('idle');
      this.direction = [];
      this.directionMultiplier = {
        x: 1,
        y: 1
      };
      this.primaryEnabled = false;
      this.secondaryEnabled = false;
      this.health = 3;
    }

    Plane.prototype.update = function(event) {
      if (event.paused) {
        return;
      }
      Plane.__super__.update.call(this, event);
      return this;
    };

    Plane.prototype.setVelocity = function() {
      var key, modifiers, value;

      modifiers = _(this.direction).reduce(function(result, key) {
        var modifier, value, _ref;

        _ref = Plane.DirectionModifiers[key];
        for (modifier in _ref) {
          value = _ref[modifier];
          result[modifier] += value;
        }
        return result;
      }, {
        x: 0,
        y: 0
      });
      for (key in modifiers) {
        value = modifiers[key];
        this.velocity[key] = value * this.directionMultiplier[key];
      }
      return this;
    };

    return Plane;

  })(Game.Movable);

}).call(this);
