// Generated by CoffeeScript 1.6.2
(function() {
  'use strict';
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Game.Plane = (function(_super) {
    __extends(Plane, _super);

    Plane.Direction = {
      up: 'up',
      down: 'down',
      left: 'left',
      right: 'right'
    };

    function Plane(spritesheet, x, y, health) {
      if (x == null) {
        x = (Game.Canvas1945.LevelWidth / 2 + .5) | 0;
      }
      if (y == null) {
        y = -64;
      }
      if (health == null) {
        health = 3;
      }
      Plane.__super__.constructor.call(this, spritesheet, x, y);
      this.play('idle');
      this._facing = Plane.Direction.down;
      this.direction = [];
      this.speed = {
        x: 1,
        y: 1,
        facing: 1.3
      };
      this.primaryEnabled = false;
      this.secondaryEnabled = false;
      this.health = 3;
      this.damage = 30;
    }

    Plane.prototype.inflict = function(damage) {
      this.health -= damage;
      if (this.health <= 0) {
        this.health = 0;
        this.after('explode', this.destroy);
        this.play('explode');
        return true;
      }
      return false;
    };

    Plane.prototype.getDirectionModifier = function(direction) {
      var p, result, v;

      result = (function() {
        switch (direction) {
          case Plane.Direction.up:
            return {
              y: -Game.Canvas1945.ScrollSpeed
            };
          case Plane.Direction.down:
            return {
              y: Game.Canvas1945.ScrollSpeed
            };
          case Plane.Direction.left:
            return {
              x: -Game.Canvas1945.ScrollSpeed
            };
          case Plane.Direction.right:
            return {
              x: Game.Canvas1945.ScrollSpeed
            };
        }
      })();
      if (this._facing === direction && direction === Plane.Direction.down) {
        for (p in result) {
          v = result[p];
          result[p] = v * this.speed.facing;
        }
      }
      return result;
    };

    Plane.prototype.update = function(event) {
      if (event.paused) {
        return;
      }
      Plane.__super__.update.call(this, event);
      return this;
    };

    Plane.prototype.destroy = function() {
      Plane.__super__.destroy.apply(this, arguments);
      return Game.EventManager.trigger('plane.destroy', this, []);
    };

    Plane.prototype.setVelocity = function() {
      var key, modifiers, value,
        _this = this;

      modifiers = _(this.direction).reduce(function(result, key) {
        var modifier, value, _ref;

        _ref = _this.getDirectionModifier(key);
        for (modifier in _ref) {
          value = _ref[modifier];
          result[modifier] += value;
        }
        return result;
      }, {
        x: 0,
        y: 0
      });
      for (key in modifiers) {
        value = modifiers[key];
        this.velocity[key] = value * this.speed[key];
      }
      return this;
    };

    Plane.prototype.move = function(direction) {
      if (__indexOf.call(this.direction, direction) >= 0) {
        return this;
      }
      this.direction.push(direction);
      this.setVelocity();
      return this;
    };

    return Plane;

  })(Game.Movable);

}).call(this);
