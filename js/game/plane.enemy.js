// Generated by CoffeeScript 1.6.2
(function() {
  'use strict';
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Game.PlaneEnemy = (function(_super) {
    __extends(PlaneEnemy, _super);

    PlaneEnemy.Behaviour = {
      looper: 'looper',
      shoot: {
        straight: 'shoot-straight',
        aim: 'shoot-aim'
      },
      spawn: {
        random: {
          x: 'spawn-random-x',
          y: 'spawn-random-y'
        }
      }
    };

    function PlaneEnemy(spritesheet, x, y, health) {
      if (x == null) {
        x = (Game.Canvas1945.LevelWidth / 2 + .5) | 0;
      }
      if (y == null) {
        y = -64;
      }
      if (health == null) {
        health = 3;
      }
      PlaneEnemy.__super__.constructor.call(this, spritesheet, x, y, health);
      this.behaviour = [];
      Game.EventManager.trigger('collidable.create', this, [Game.CollisionManager.Groups.Enemy, this]);
    }

    PlaneEnemy.prototype.addBehaviour = function(behaviour, next) {
      if (next == null) {
        next = false;
      }
      this.behaviour.push(behaviour);
      if (!next) {
        if (this.behaves(PlaneEnemy.Behaviour.spawn.random.x)) {
          this.x = Math.random() * Game.Canvas1945.LevelWidth;
        }
        if (this.behaves(PlaneEnemy.Behaviour.spawn.random.y)) {
          this.y -= Math.random() * Game.Canvas1945.LevelHeight * 2;
        }
      }
      return this;
    };

    PlaneEnemy.prototype.behaves = function(behaviour) {
      return __indexOf.call(this.behaviour, behaviour) >= 0;
    };

    PlaneEnemy.prototype.update = function(event) {
      if (event.paused) {
        return;
      }
      PlaneEnemy.__super__.update.call(this, event);
      if (this._facing === Game.Plane.Direction.down && this.y > Game.Canvas1945.Height) {
        if (this.behaves(PlaneEnemy.Behaviour.looper)) {
          this.y = -64;
        }
        if (this.behaves(PlaneEnemy.Behaviour.spawn.random.x)) {
          this.x = Math.random() * Game.Canvas1945.LevelWidth;
        }
      } else if (this._facing === Game.Plane.Direction.up && this.y < -64) {
        if (this.behaves(PlaneEnemy.Behaviour.looper)) {
          this.y = Game.Canvas1945.Height;
        }
        if (this.behaves(PlaneEnemy.Behaviour.spawn.random.x)) {
          this.x = Math.random() * Game.Canvas1945.LevelWidth;
        }
      }
      return this;
    };

    PlaneEnemy.prototype.collide = function(group, object) {
      if (this.inflict(object.damage)) {
        return Game.EventManager.trigger('collidable.destroy', this, [Game.CollisionManager.Groups.Enemy, this]);
      }
    };

    PlaneEnemy.prototype.setVelocity = function() {
      var key, modifiers, value,
        _this = this;

      modifiers = _(this.direction).reduce(function(result, key) {
        var modifier, value, _ref;

        _ref = _this.getDirectionModifier(key);
        for (modifier in _ref) {
          value = _ref[modifier];
          result[modifier] += value;
        }
        return result;
      }, {
        x: 0,
        y: 0
      });
      for (key in modifiers) {
        value = modifiers[key];
        this.velocity[key] = value * this.speed[key];
      }
      return this;
    };

    PlaneEnemy.prototype.move = function(direction) {
      if (__indexOf.call(this.direction, direction) >= 0) {
        return this;
      }
      this.direction.push(direction);
      this.setVelocity();
      return this;
    };

    return PlaneEnemy;

  })(Game.Plane);

}).call(this);
