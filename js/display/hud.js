// Generated by CoffeeScript 1.6.2
(function() {
  'use strict';
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Display.HeadsUpDisplay = (function(_super) {
    __extends(HeadsUpDisplay, _super);

    HeadsUpDisplay.HealthBar = {
      x: 12,
      y: 45,
      height: 10,
      width: 126
    };

    HeadsUpDisplay.LivesBar = {
      x: 6,
      y: 6,
      image: Builder.PlaneMini.create(),
      animation: 'mini'
    };

    function HeadsUpDisplay(game, level) {
      this.game = game;
      this.level = level;
      HeadsUpDisplay.__super__.constructor.apply(this, arguments);
      this.add('background', new createjs.Bitmap('img/1945.bottom.gif'));
      this.add('healthbar', this.createHealthBar());
      this.add('lives', this.createLivesBar());
      this.y = Game.Canvas1945.Height - 76;
      this._health = this.level.player.health;
      this._lives = this.game.lives;
      this.drawHealthBar();
      this.drawLivesBar();
    }

    HeadsUpDisplay.prototype.createHealthBar = function() {
      this.healthBar = new createjs.Shape();
      this.healthBar.x = HeadsUpDisplay.HealthBar.x;
      this.healthBar.y = HeadsUpDisplay.HealthBar.y;
      return this.healthBar;
    };

    HeadsUpDisplay.prototype.createLivesBar = function() {
      this.livesBar = new Game.Container();
      this.livesBar.x = HeadsUpDisplay.LivesBar.x;
      this.livesBar.y = HeadsUpDisplay.LivesBar.y;
      return this.livesBar;
    };

    HeadsUpDisplay.prototype.getHealthColors = function(health, max) {
      var dest, factor, orig;

      if (health == null) {
        health = this._health;
      }
      if (max == null) {
        max = 100;
      }
      orig = [
        {
          r: 0,
          g: 128,
          b: 0
        }, {
          r: 0,
          g: 100,
          b: 0
        }
      ];
      dest = [
        {
          r: 255,
          g: 0,
          b: 0
        }, {
          r: 139,
          g: 0,
          b: 0
        }
      ];
      factor = health / max;
      return _(orig).reduce(function(results, colour, index) {
        var component, result, value;

        result = {};
        for (component in colour) {
          value = colour[component];
          result[component] = value * factor + dest[index][component] * (1 - factor);
        }
        results.push(result);
        return results;
      }, []).map(function(colour) {
        return "rgb( " + ((colour.r + 0.5) | 0) + ", " + ((colour.g + 0.5) | 0) + ", " + ((colour.b + 0.5) | 0) + " )";
      });
    };

    HeadsUpDisplay.prototype.drawHealthBar = function(max) {
      if (max == null) {
        max = 100;
      }
      this.healthBar.graphics.beginLinearGradientFill(this.getHealthColors(), [0.8, 0.85], (HeadsUpDisplay.HealthBar.width / 2 + 0.5) | 0, 0, (HeadsUpDisplay.HealthBar.width / 2 + 0.5) | 0, HeadsUpDisplay.HealthBar.height).drawRect(0, 0, HeadsUpDisplay.HealthBar.width / max * this._health, HeadsUpDisplay.HealthBar.height);
      return this;
    };

    HeadsUpDisplay.prototype.drawLivesBar = function(max) {
      var _ref;

      if (max == null) {
        max = 5;
      }
      while (this.livesBar.length > this._lives) {
        this.livesBar.remove("life-" + this.livesBar.length);
      }
      while ((max > (_ref = this.livesBar.length) && _ref < this._lives)) {
        if (this.livesBar.length < max - 1) {
          this.image = new Game.Sprite(HeadsUpDisplay.LivesBar.image.spritesheet).stop(HeadsUpDisplay.LivesBar.animation);
          this.image.y = 16;
          this.image.x = this.livesBar.length * 28 + 16;
          this.image.createjs.shadow = new createjs.Shadow("rgba( 0, 0, 0, .7 )", 2, 2, 0);
        } else {
          this.image = new createjs.Text("+", "20px Arial", "white");
          this.image.shadow = new createjs.Shadow("rgba( 0, 0, 0, .9 )", 2, 2, 2);
          this.image.x = this.livesBar.length * 28 + 4;
          this.image.y = 4;
        }
        this.livesBar.add("life-" + (this.livesBar.length + 1), this.image);
      }
      return this;
    };

    HeadsUpDisplay.prototype.update = function(event) {
      var dt;

      HeadsUpDisplay.__super__.update.call(this, event);
      dt = event.delta / 1000;
      if (this.level.player.health !== this._health) {
        this._health = this._health + (this.level.player.health - this._health) * Math.min(1, dt * 4);
        if ((this.level.player.health - this._health) < 0.001) {
          this._health = this.level.player.health;
        }
        this.drawHealthBar();
      }
      if (this.game.lives !== this._lives) {
        this._lives = this.game.lives;
        this.drawLivesBar();
      }
      return self;
    };

    return HeadsUpDisplay;

  })(Game.Container);

}).call(this);
