// Generated by CoffeeScript 1.7.1
(function() {
  'use strict';
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Display.Progress = (function(_super) {
    __extends(Progress, _super);

    function Progress() {
      Progress.__super__.constructor.apply(this, arguments);
      this.bar = new createjs.Shape();
      Object.defineProperty(this, 'total', {
        get: function() {
          return this._total;
        },
        set: function(value) {
          return this._total = value;
        }
      });
      Object.defineProperty(this, 'current', {
        get: function() {
          return this._current;
        },
        set: function(value) {
          return this._current = value;
        }
      });
      Object.defineProperty(this, 'width', {
        get: function() {
          return this._width;
        },
        set: function(value) {
          return this._width = value;
        }
      });
      Object.defineProperty(this, 'height', {
        get: function() {
          return this._height;
        },
        set: function(value) {
          return this._height = value;
        }
      });
      this.add('bar', this.bar);
      this._current = 0;
      this._total = 1;
      this._displayedCurrent = this.current;
      this.width = 200;
      this.height = 5;
    }

    Progress.prototype.getColors = function(current, max) {
      var dest, factor, orig;
      if (current == null) {
        current = this._displayedCurrent;
      }
      if (max == null) {
        max = this.total;
      }
      orig = [
        {
          r: 255,
          g: 255,
          b: 255
        }, {
          r: 200,
          g: 200,
          b: 200
        }
      ];
      dest = [
        {
          r: 50,
          g: 50,
          b: 50
        }, {
          r: 0,
          g: 0,
          b: 0
        }
      ];
      factor = current / max;
      return _.reduce(orig, function(results, colour, index) {
        var component, result, value;
        result = {};
        for (component in colour) {
          value = colour[component];
          result[component] = value * factor + dest[index][component] * (1 - factor);
        }
        results.push(result);
        return results;
      }, []).map(function(colour) {
        return "rgb( " + ((colour.r + 0.5) | 0) + ", " + ((colour.g + 0.5) | 0) + ", " + ((colour.b + 0.5) | 0) + " )";
      });
    };

    Progress.prototype.draw = function() {
      this.bar.graphics.clear();
      return this.bar.graphics.beginLinearGradientFill(this.getColors(), [0.8, 0.85], (this.width / 2 + 0.5) | 0, 0, (this.width / 2 + 0.5) | 0, this.height).drawRect(0, 0, this.width / this.total * this._displayedCurrent, this.height);
    };

    Progress.prototype.update = function(event) {
      var dt;
      Progress.__super__.update.call(this, event);
      dt = event.delta / 1000;
      if (this.current !== this._displayedCurrent) {
        this._displayedCurrent = this._displayedCurrent + (this.current - this._displayedCurrent) * Math.min(1, dt * 2);
        if (Math.abs(this.current - this._displayedCurrent) < 0.001) {
          this._displayedCurrent = this.current;
        }
        this.draw();
      }
      return this;
    };

    return Progress;

  })(Game.Container);

}).call(this);
